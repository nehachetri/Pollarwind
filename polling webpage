<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pollarwind - Create & Vote on Polls</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 30px 0;
        }

        .logo {
            font-size: 3rem;
            font-weight: bold;
            color: white;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            margin-bottom: 10px;
        }

        .tagline {
            color: rgba(255,255,255,0.9);
            font-size: 1.2rem;
        }

        .auth-container, .main-app {
            background: rgba(255,255,255,0.95);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }

        .auth-tabs {
            display: flex;
            margin-bottom: 30px;
            border-radius: 10px;
            overflow: hidden;
            background: #f8f9fa;
        }

        .auth-tab {
            flex: 1;
            padding: 15px;
            text-align: center;
            background: transparent;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
            font-weight: 600;
        }

        .auth-tab.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .auth-form {
            display: none;
        }

        .auth-form.active {
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        .form-input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e1e8ed;
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .btn-google {
            background: #db4437;
            color: white;
            width: 100%;
            margin-bottom: 15px;
        }

        .btn-google:hover {
            background: #c23321;
            transform: translateY(-2px);
        }

        .divider {
            text-align: center;
            margin: 20px 0;
            position: relative;
            color: #999;
        }

        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: #e1e8ed;
        }

        .divider span {
            background: white;
            padding: 0 15px;
        }

        .nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding: 20px 0;
            border-bottom: 2px solid #f1f3f4;
        }

        .nav-brand {
            font-size: 1.5rem;
            font-weight: bold;
            color: #667eea;
        }

        .nav-user {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .poll-creator {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 40px;
        }

        .poll-creator h3 {
            margin-bottom: 20px;
            color: #333;
        }

        .option-input {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .option-input input {
            flex: 1;
        }

        .btn-remove {
            background: #dc3545;
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
        }

        .btn-add {
            background: #28a745;
            color: white;
            margin-bottom: 20px;
        }

        .polls-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
        }

        .poll-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .poll-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        .poll-question {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 20px;
            color: #333;
        }

        .poll-option {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .poll-option:hover {
            border-color: #667eea;
            background: #f0f2ff;
        }

        .poll-option.voted {
            border-color: #28a745;
            background: #e8f5e8;
        }

        .poll-option-text {
            position: relative;
            z-index: 2;
            font-weight: 500;
        }

        .poll-option-votes {
            position: relative;
            z-index: 2;
            font-size: 0.9rem;
            color: #666;
            margin-top: 5px;
        }

        .poll-option-bar {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(118, 75, 162, 0.2));
            transition: width 0.5s ease;
            border-radius: 8px;
        }

        .poll-meta {
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid #e9ecef;
            font-size: 0.9rem;
            color: #666;
            display: flex;
            justify-content: space-between;
        }

        .hidden {
            display: none;
        }

        .alert {
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .polls-grid {
                grid-template-columns: 1fr;
            }
            
            .logo {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">Pollarwind</div>
            <div class="tagline">Create polls, gather opinions, make decisions</div>
        </div>

        <!-- Authentication Section -->
        <div id="authSection" class="auth-container">
            <div class="auth-tabs">
                <button class="auth-tab active" onclick="switchTab('login')">Login</button>
                <button class="auth-tab" onclick="switchTab('signup')">Sign Up</button>
            </div>

            <div id="loginForm" class="auth-form active">
                <button class="btn btn-google" onclick="googleAuth()">
                    Continue with Google
                </button>
                <div class="divider">
                    <span>or</span>
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" id="loginEmail" placeholder="Enter your email">
                </div>
                <div class="form-group">
                    <label class="form-label">Password</label>
                    <input type="password" class="form-input" id="loginPassword" placeholder="Enter your password">
                </div>
                <button class="btn btn-primary" onclick="login()" style="width: 100%;">Login</button>
            </div>

            <div id="signupForm" class="auth-form">
                <button class="btn btn-google" onclick="googleAuth()">
                    Continue with Google
                </button>
                <div class="divider">
                    <span>or</span>
                </div>
                <div class="form-group">
                    <label class="form-label">Full Name</label>
                    <input type="text" class="form-input" id="signupName" placeholder="Enter your full name">
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" id="signupEmail" placeholder="Enter your email">
                </div>
                <div class="form-group">
                    <label class="form-label">Password</label>
                    <input type="password" class="form-input" id="signupPassword" placeholder="Create a password">
                </div>
                <button class="btn btn-primary" onclick="signup()" style="width: 100%;">Sign Up</button>
            </div>
        </div>

        <!-- Main Application -->
        <div id="mainApp" class="main-app hidden">
            <div class="nav">
                <div class="nav-brand">Pollarwind</div>
                <div class="nav-user">
                    <div class="user-avatar" id="userAvatar"></div>
                    <span id="userName"></span>
                    <button class="btn btn-primary" onclick="logout()">Logout</button>
                </div>
            </div>

            <div class="poll-creator">
                <h3>Create a New Poll</h3>
                <div class="form-group">
                    <label class="form-label">Poll Question</label>
                    <input type="text" class="form-input" id="pollQuestion" placeholder="What's your question?">
                </div>
                <div id="pollOptions">
                    <div class="option-input">
                        <input type="text" class="form-input" placeholder="Option 1">
                        <button class="btn btn-remove" onclick="removeOption(this)">Remove</button>
                    </div>
                    <div class="option-input">
                        <input type="text" class="form-input" placeholder="Option 2">
                        <button class="btn btn-remove" onclick="removeOption(this)">Remove</button>
                    </div>
                </div>
                <button class="btn btn-add" onclick="addOption()">Add Option</button>
                <button class="btn btn-primary" onclick="createPoll()">Create Poll</button>
            </div>

            <div id="alertContainer"></div>

            <div class="polls-grid" id="pollsContainer">
                <!-- Polls will be dynamically added here -->
            </div>
        </div>
    </div>

    <script>
        // Simulated database using localStorage
        class Database {
            static users = JSON.parse(localStorage.getItem('pollarwind_users') || '[]');
            static polls = JSON.parse(localStorage.getItem('pollarwind_polls') || '[]');

            static saveUsers() {
                localStorage.setItem('pollarwind_users', JSON.stringify(this.users));
            }

            static savePolls() {
                localStorage.setItem('pollarwind_polls', JSON.stringify(this.polls));
            }

            static findUser(email) {
                return this.users.find(user => user.email === email);
            }

            static addUser(user) {
                this.users.push({ ...user, id: Date.now().toString() });
                this.saveUsers();
            }

            static addPoll(poll) {
                const newPoll = {
                    ...poll,
                    id: Date.now().toString(),
                    createdAt: new Date().toISOString(),
                    votes: {},
                    totalVotes: 0
                };
                this.polls.unshift(newPoll);
                this.savePolls();
                return newPoll;
            }

            static votePoll(pollId, optionIndex, userId) {
                const poll = this.polls.find(p => p.id === pollId);
                if (poll && !poll.votes[userId]) {
                    poll.votes[userId] = optionIndex;
                    poll.totalVotes++;
                    this.savePolls();
                    return true;
                }
                return false;
            }
        }

        let currentUser = JSON.parse(localStorage.getItem('pollarwind_currentUser') || 'null');

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            if (currentUser) {
                showMainApp();
            }
        });

        function switchTab(tab) {
            document.querySelectorAll('.auth-tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.auth-form').forEach(f => f.classList.remove('active'));
            
            document.querySelector(`[onclick="switchTab('${tab}')"]`).classList.add('active');
            document.getElementById(tab + 'Form').classList.add('active');
        }

        function showAlert(message, type = 'success') {
            const alertContainer = document.getElementById('alertContainer');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            alertContainer.innerHTML = '';
            alertContainer.appendChild(alert);
            
            setTimeout(() => {
                alert.remove();
            }, 5000);
        }

        function googleAuth() {
            // Simulate Google auth
            const googleUser = {
                name: 'Google User',
                email: 'user@gmail.com',
                provider: 'google'
            };
            
            let user = Database.findUser(googleUser.email);
            if (!user) {
                Database.addUser(googleUser);
                user = Database.findUser(googleUser.email);
            }
            
            currentUser = user;
            localStorage.setItem('pollarwind_currentUser', JSON.stringify(currentUser));
            showMainApp();
            showAlert('Successfully signed in with Google!');
        }

        function signup() {
            const name = document.getElementById('signupName').value;
            const email = document.getElementById('signupEmail').value;
            const password = document.getElementById('signupPassword').value;

            if (!name || !email || !password) {
                showAlert('Please fill in all fields', 'error');
                return;
            }

            if (Database.findUser(email)) {
                showAlert('User already exists with this email', 'error');
                return;
            }

            const user = { name, email, password };
            Database.addUser(user);
            currentUser = Database.findUser(email);
            localStorage.setItem('pollarwind_currentUser', JSON.stringify(currentUser));
            showMainApp();
            showAlert('Account created successfully!');
        }

        function login() {
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;

            if (!email || !password) {
                showAlert('Please fill in all fields', 'error');
                return;
            }

            const user = Database.findUser(email);
            if (!user || (user.password && user.password !== password)) {
                showAlert('Invalid credentials', 'error');
                return;
            }

            currentUser = user;
            localStorage.setItem('pollarwind_currentUser', JSON.stringify(currentUser));
            showMainApp();
            showAlert('Login successful!');
        }

        function logout() {
            currentUser = null;
            localStorage.removeItem('pollarwind_currentUser');
            document.getElementById('authSection').classList.remove('hidden');
            document.getElementById('mainApp').classList.add('hidden');
            showAlert('Logged out successfully!');
        }

        function showMainApp() {
            document.getElementById('authSection').classList.add('hidden');
            document.getElementById('mainApp').classList.remove('hidden');
            document.getElementById('userName').textContent = currentUser.name;
            document.getElementById('userAvatar').textContent = currentUser.name.charAt(0).toUpperCase();
            loadPolls();
        }

        function addOption() {
            const optionsContainer = document.getElementById('pollOptions');
            const optionCount = optionsContainer.children.length;
            
            const optionDiv = document.createElement('div');
            optionDiv.className = 'option-input';
            optionDiv.innerHTML = `
                <input type="text" class="form-input" placeholder="Option ${optionCount + 1}">
                <button class="btn btn-remove" onclick="removeOption(this)">Remove</button>
            `;
            optionsContainer.appendChild(optionDiv);
        }

        function removeOption(button) {
            const optionsContainer = document.getElementById('pollOptions');
            if (optionsContainer.children.length > 2) {
                button.parentElement.remove();
            } else {
                showAlert('A poll must have at least 2 options', 'error');
            }
        }

        function createPoll() {
            const question = document.getElementById('pollQuestion').value;
            const optionInputs = document.querySelectorAll('#pollOptions input');
            const options = Array.from(optionInputs).map(input => input.value).filter(val => val.trim());

            if (!question.trim()) {
                showAlert('Please enter a poll question', 'error');
                return;
            }

            if (options.length < 2) {
                showAlert('Please provide at least 2 options', 'error');
                return;
            }

            const poll = {
                question: question.trim(),
                options,
                createdBy: currentUser.id,
                createdByName: currentUser.name
            };

            Database.addPoll(poll);
            
            // Clear form
            document.getElementById('pollQuestion').value = '';
            optionInputs.forEach(input => input.value = '');

            loadPolls();
            showAlert('Poll created successfully!');
        }

        function loadPolls() {
            const container = document.getElementById('pollsContainer');
            container.innerHTML = '';

            Database.polls.forEach(poll => {
                const pollCard = createPollCard(poll);
                container.appendChild(pollCard);
            });
        }

        function createPollCard(poll) {
            const card = document.createElement('div');
            card.className = 'poll-card';

            const hasVoted = poll.votes[currentUser.id] !== undefined;
            const userVote = poll.votes[currentUser.id];

            const optionsHTML = poll.options.map((option, index) => {
                const votes = Object.values(poll.votes).filter(vote => vote === index).length;
                const percentage = poll.totalVotes > 0 ? (votes / poll.totalVotes * 100).toFixed(1) : 0;
                const isVoted = hasVoted && userVote === index;

                return `
                    <div class="poll-option ${isVoted ? 'voted' : ''}" onclick="${hasVoted ? '' : `vote('${poll.id}', ${index})`}">
                        <div class="poll-option-bar" style="width: ${percentage}%"></div>
                        <div class="poll-option-text">${option}</div>
                        <div class="poll-option-votes">${votes} votes (${percentage}%)</div>
                    </div>
                `;
            }).join('');

            card.innerHTML = `
                <div class="poll-question">${poll.question}</div>
                ${optionsHTML}
                <div class="poll-meta">
                    <span>by ${poll.createdByName}</span>
                    <span>${poll.totalVotes} total votes</span>
                </div>
            `;

            return card;
        }

        function vote(pollId, optionIndex) {
            if (Database.votePoll(pollId, optionIndex, currentUser.id)) {
                loadPolls();
                showAlert('Vote cast successfully!');
            } else {
                showAlert('You have already voted on this poll', 'error');
            }
        }

        // Initialize with some sample polls
        if (Database.polls.length === 0) {
            const samplePolls = [
                {
                    question: "What's your favorite programming language?",
                    options: ["JavaScript", "Python", "Java", "C++"],
                    createdBy: "system",
                    createdByName: "Pollarwind Team"
                },
                {
                    question: "Which season do you prefer?",
                    options: ["Spring", "Summer", "Fall", "Winter"],
                    createdBy: "system",
                    createdByName: "Pollarwind Team"
                }
            ];
            
            samplePolls.forEach(poll => Database.addPoll(poll));
        }
    </script>
</body>
</html>
